{"/home/travis/build/npmtest/node-npmtest-xoauth2/test.js":"/* istanbul instrument in package npmtest_xoauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xoauth2/lib.npmtest_xoauth2.js":"/* istanbul instrument in package npmtest_xoauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_xoauth2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_xoauth2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-xoauth2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-xoauth2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_xoauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_xoauth2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_xoauth2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_xoauth2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_xoauth2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_xoauth2.__dirname + '/lib.npmtest_xoauth2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xoauth2/node_modules/xoauth2/src/xoauth2.js":"'use strict';\n\nvar Stream = require('stream').Stream;\nvar utillib = require('util');\nvar querystring = require('querystring');\nvar http = require('http');\nvar https = require('https');\nvar urllib = require('url');\nvar crypto = require('crypto');\n\n/**\n * Wrapper for new XOAuth2Generator.\n *\n * Usage:\n *\n *     var xoauthgen = createXOAuth2Generator({});\n *     xoauthgen.getToken(function(err, xoauthtoken){\n *         socket.send('AUTH XOAUTH2 ' + xoauthtoken);\n *     });\n *\n * @param {Object} options See XOAuth2Generator for details\n * @return {Object}\n */\nmodule.exports.createXOAuth2Generator = function(options) {\n    return new XOAuth2Generator(options);\n};\n\n/**\n * XOAUTH2 access_token generator for Gmail.\n * Create client ID for web applications in Google API console to use it.\n * See Offline Access for receiving the needed refreshToken for an user\n * https://developers.google.com/accounts/docs/OAuth2WebServer#offline\n *\n * @constructor\n * @param {Object} options Client information for token generation\n * @param {String} options.user         (Required) User e-mail address\n * @param {String} options.clientId     (Required) Client ID value\n * @param {String} options.clientSecret (Required) Client secret value\n * @param {String} options.refreshToken (Required) Refresh token for an user\n * @param {String} options.accessUrl    (Optional) Endpoint for token generation, defaults to 'https://accounts.google.com/o/oauth2/token'\n * @param {String} options.accessToken  (Optional) An existing valid accessToken\n * @param {int}    options.timeout      (Optional) TTL in seconds\n */\nfunction XOAuth2Generator(options) {\n    Stream.call(this);\n    this.options = options || {};\n\n    if (options && options.service) {\n        if (!options.scope || !options.privateKey || !options.user) {\n            throw new Error('Options \"scope\", \"privateKey\" and \"user\" are required for service account!');\n        }\n\n        var serviceRequestTimeout = Math.min(Math.max(Number(this.options.serviceRequestTimeout) || 0, 0), 3600);\n        this.options.serviceRequestTimeout = serviceRequestTimeout || 5 * 60;\n    }\n\n    this.options.accessUrl = this.options.accessUrl || 'https://accounts.google.com/o/oauth2/token';\n    this.options.customHeaders = this.options.customHeaders || {};\n    this.options.customParams = this.options.customParams || {};\n\n    this.token = this.options.accessToken && this.buildXOAuth2Token(this.options.accessToken) || false;\n    this.accessToken = this.token && this.options.accessToken || false;\n\n    var timeout = Math.max(Number(this.options.timeout) || 0, 0);\n    this.timeout = timeout && Date.now() + timeout * 1000 || 0;\n}\nutillib.inherits(XOAuth2Generator, Stream);\n\n/**\n * Returns or generates (if previous has expired) a XOAuth2 token\n *\n * @param {Function} callback Callback function with error object and token string\n */\nXOAuth2Generator.prototype.getToken = function(callback) {\n    if (this.token && (!this.timeout || this.timeout > Date.now())) {\n        return callback(null, this.token, this.accessToken);\n    }\n    this.generateToken(callback);\n};\n\n/**\n * Updates token values\n *\n * @param {String} accessToken New access token\n * @param {Number} timeout Access token lifetime in seconds\n *\n * Emits 'token': { user: User email-address, accessToken: the new accessToken, timeout: TTL in seconds}\n */\nXOAuth2Generator.prototype.updateToken = function(accessToken, timeout) {\n    this.token = this.buildXOAuth2Token(accessToken);\n    this.accessToken = accessToken;\n    timeout = Math.max(Number(timeout) || 0, 0);\n    this.timeout = timeout && Date.now() + timeout * 1000 || 0;\n\n    this.emit('token', {\n        user: this.options.user,\n        accessToken: accessToken || '',\n        timeout: Math.max(Math.floor((this.timeout - Date.now()) / 1000), 0)\n    });\n};\n\n/**\n * Generates a new XOAuth2 token with the credentials provided at initialization\n *\n * @param {Function} callback Callback function with error object and token string\n */\nXOAuth2Generator.prototype.generateToken = function(callback) {\n    var urlOptions;\n    if (this.options.service) {\n        // service account - https://developers.google.com/identity/protocols/OAuth2ServiceAccount\n        var iat = Math.floor(Date.now() / 1000); // unix time\n        var token = jwtSignRS256({\n            iss: this.options.service,\n            scope: this.options.scope,\n            sub: this.options.user,\n            aud: this.options.accessUrl,\n            iat: iat,\n            exp: iat + this.options.serviceRequestTimeout,\n        }, this.options.privateKey);\n\n        urlOptions = {\n            grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n            assertion: token\n        };\n    }\n    else {\n        // web app - https://developers.google.com/identity/protocols/OAuth2WebServer\n        urlOptions = {\n            client_id: this.options.clientId || '',\n            client_secret: this.options.clientSecret || '',\n            refresh_token: this.options.refreshToken,\n            grant_type: 'refresh_token'\n        };\n    }\n\n    for (var param in this.options.customParams) {\n        urlOptions[param] = this.options.customParams[param];\n    }\n\n    var payload = querystring.stringify(urlOptions);\n    var self = this;\n    postRequest(this.options.accessUrl, payload, this.options, function (error, response, body) {\n        var data;\n\n        if (error) {\n            return callback(error);\n        }\n\n        try {\n            data = JSON.parse(body.toString());\n        } catch (E) {\n            return callback(E);\n        }\n\n        if (!data || typeof data !== 'object') {\n            return callback(new Error('Invalid authentication response'));\n        }\n\n        if (data.error) {\n            return callback(new Error(data.error));\n        }\n\n        if (data.access_token) {\n            self.updateToken(data.access_token, data.expires_in);\n            return callback(null, self.token, self.accessToken);\n        }\n\n        return callback(new Error('No access token'));\n    });\n};\n\n/**\n * Converts an access_token and user id into a base64 encoded XOAuth2 token\n *\n * @param {String} accessToken Access token string\n * @return {String} Base64 encoded token for IMAP or SMTP login\n */\nXOAuth2Generator.prototype.buildXOAuth2Token = function(accessToken) {\n    var authData = [\n        'user=' + (this.options.user || ''),\n        'auth=Bearer ' + accessToken,\n        '',\n        ''\n    ];\n    return new Buffer(authData.join('\\x01'), 'utf-8').toString('base64');\n};\n\n/**\n * Custom POST request handler.\n * This is only needed to keep paths short in Windows – usually this module\n * is a dependency of a dependency and if it tries to require something\n * like the request module the paths get way too long to handle for Windows.\n * As we do only a simple POST request we do not actually require complicated\n * logic support (no redirects, no nothing) anyway.\n *\n * @param {String} url Url to POST to\n * @param {String|Buffer} payload Payload to POST\n * @param {Function} callback Callback function with (err, buff)\n */\nfunction postRequest(url, payload, params, callback) {\n    var options = urllib.parse(url),\n        finished = false,\n        response = null,\n        req;\n\n    options.method = 'POST';\n\n    /**\n     * Cleanup all the event listeners registered on the request, and ensure that *callback* is only called one time\n     *\n     * @note passes all the arguments passed to this function to *callback*\n     */\n    var cleanupAndCallback = function() {\n        if (finished === true) {\n            return;\n        }\n        finished = true;\n        req.removeAllListeners();\n        if (response !== null) {\n            response.removeAllListeners();\n        }\n        callback.apply(null, arguments);\n    };\n\n    req = (options.protocol === 'https:' ? https : http).request(options, function(res) {\n        response = res;\n        var data = [];\n        var datalen = 0;\n\n        res.on('data', function(chunk) {\n            data.push(chunk);\n            datalen += chunk.length;\n        });\n\n        res.on('end', function() {\n            return cleanupAndCallback(null, res, Buffer.concat(data, datalen));\n        });\n\n        res.on('error', function(err) {\n            return cleanupAndCallback(err);\n        });\n    });\n\n    req.on('error', function(err) {\n        return cleanupAndCallback(err);\n    });\n\n    if (payload) {\n        req.setHeader('Content-Type', 'application/x-www-form-urlencoded');\n        req.setHeader('Content-Length', typeof payload === 'string' ? Buffer.byteLength(payload) : payload.length);\n    }\n\n    for (var customHeaderName in params.customHeaders) {\n      req.setHeader(customHeaderName, params.customHeaders[customHeaderName]);\n    }\n\n    req.end(payload);\n}\n\n/**\n * Encodes a buffer or a string into Base64url format\n *\n * @param {Buffer|String} data The data to convert\n * @return {String} The encoded string\n */\nfunction toBase64URL(data) {\n    if (typeof data === 'string') {\n        data = new Buffer(data);\n    }\n\n    return data.toString('base64')\n        .replace(/=+/g, '')     // remove '='s\n        .replace(/\\+/g, '-')    // '+' → '-'\n        .replace(/\\//g, '_');   // '/' → '_'\n}\n\n/**\n * Header used for RS256 JSON Web Tokens, encoded as Base64URL.\n */\nvar JWT_RS256_HEADER = toBase64URL('{\"alg\":\"RS256\",\"typ\":\"JWT\"}');\n\n/**\n * Creates a JSON Web Token signed with RS256 (SHA256 + RSA)\n * Only this specific operation is needed so it's implemented here\n * instead of depending on jsonwebtoken.\n *\n * @param {Object} payload The payload to include in the generated token\n * @param {String} privateKey Private key in PEM format for signing the token\n * @return {String} The generated and signed token\n */\nfunction jwtSignRS256(payload, privateKey) {\n    var signaturePayload = JWT_RS256_HEADER + '.' + toBase64URL(JSON.stringify(payload));\n\n    var rs256Signer = crypto.createSign('RSA-SHA256');\n    rs256Signer.update(signaturePayload);\n    var signature = toBase64URL(rs256Signer.sign(privateKey));\n\n    return signaturePayload + '.' + signature;\n}\n","/home/travis/build/npmtest/node-npmtest-xoauth2/node_modules/xoauth2/Gruntfile.js":"'use strict';\n\nmodule.exports = function(grunt) {\n\n    // Project configuration.\n    grunt.initConfig({\n        jshint: {\n            all: ['src/*.js', 'test/*.js'],\n            options: {\n                jshintrc: '.jshintrc'\n            }\n        },\n\n        mochaTest: {\n            all: {\n                options: {\n                    reporter: 'spec'\n                },\n                src: ['test/*-test.js']\n            }\n        }\n    });\n\n    // Load the plugin(s)\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n    grunt.loadNpmTasks('grunt-mocha-test');\n\n    // Tasks\n    grunt.registerTask('default', ['jshint', 'mochaTest']);\n};"}